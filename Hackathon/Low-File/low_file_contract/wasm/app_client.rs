// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct TrafficLight<R> {
    remoting: R,
}
impl<R> TrafficLight<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TrafficLight for TrafficLight<R> {
    type Args = R::Args;
    /// Llamada remota para establecer los datos del usuario.
    fn set_user_data(
        &mut self,
        nombre: String,
        edad: u32,
        profesion: String,
        titulacion: String,
        ubicacion: String,
        certificaciones: Vec<String>,
    ) -> impl Call<Output = (), Args = R::Args> {
        RemotingAction::<_, traffic_light::io::SetUserData>::new(
            self.remoting.clone(),
            (
                nombre,
                edad,
                profesion,
                titulacion,
                ubicacion,
                certificaciones,
            ),
        )
    }
    /// Llamada remota para recuperar los datos del usuario.
    fn get_user_data(&self) -> impl Query<Output = IoLowFileState, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::GetUserData>::new(self.remoting.clone(), ())
    }
}

pub mod traffic_light {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct SetUserData(());
        impl SetUserData {
            #[allow(dead_code)]
            pub fn encode_call(
                nombre: String,
                edad: u32,
                profesion: String,
                titulacion: String,
                ubicacion: String,
                certificaciones: Vec<String>,
            ) -> Vec<u8> {
                <SetUserData as ActionIo>::encode_call(&(
                    nombre,
                    edad,
                    profesion,
                    titulacion,
                    ubicacion,
                    certificaciones,
                ))
            }
        }
        impl ActionIo for SetUserData {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 44, 83, 101, 116, 85,
                115, 101, 114, 68, 97, 116, 97,
            ];
            type Params = (String, u32, String, String, String, Vec<String>);
            type Reply = ();
        }
        pub struct GetUserData(());
        impl GetUserData {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetUserData as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetUserData {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 44, 71, 101, 116, 85,
                115, 101, 114, 68, 97, 116, 97,
            ];
            type Params = ();
            type Reply = super::IoLowFileState;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoLowFileState {
    pub nombre: String,
    pub edad: u32,
    pub profesion: String,
    pub titulacion: String,
    pub ubicacion: String,
    pub certificaciones: Vec<String>,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait TrafficLight {
        type Args;
        fn set_user_data(
            &mut self,
            nombre: String,
            edad: u32,
            profesion: String,
            titulacion: String,
            ubicacion: String,
            certificaciones: Vec<String>,
        ) -> impl Call<Output = (), Args = Self::Args>;
        fn get_user_data(&self) -> impl Query<Output = IoLowFileState, Args = Self::Args>;
    }
}
